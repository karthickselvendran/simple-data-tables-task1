{"version":3,"sources":["api/settings.js","api/simpleDataTableApi.js","action/Action.js","components/Pagination.js","pages/SimpleDataTable.js","App.js","reportWebVitals.js","action/ActionTypes.js","reducer/Reducer.js","configureStore.js","index.js"],"names":["settings","getData","simpleDataTableApi","axios","get","data","dispatch","getTableData","then","res","type","catch","error","Pagination","perPage","tableDatas","paginate","pageNumbers","i","Math","ceil","push","class","map","number","onClick","href","columnHeader","SimpleDataTable","props","handleSort","key","setState","switchSort","state","copyTableData","tableData","sort","compareByDesc","currentRowData","slice","a","b","generateHeader","length","id","e","target","handlePageChange","pageNumber","upperLimit","parseInt","lowerLimit","itemLength","keyWordChange","input","value","result","filter","name","toLowerCase","includes","email","body","splice","this","totalItemsCount","nextProps","className","Row","Col","onChange","placeholder","generateTableData","React","Component","connect","datas","bindActionCreators","Object","assign","Action","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","REGISTER","Reducer","action","types","middlewares","thunk","logger","require","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f92313ab.chunk.js","sourcesContent":["const settings = {\r\n    getData: \"https://jsonplaceholder.typicode.com/comments\"\r\n}\r\n\r\nexport default settings;","import axios from \"axios\";\r\nimport settings from './settings';\r\n\r\nexport default class simpleDataTableApi {\r\n\r\n    static getTableData() {\r\n        return axios.get(settings.getData);\r\n    }\r\n\r\n}","\r\nimport simpleDataTableApi from \"../api/simpleDataTableApi\";\r\n\r\nexport const getData = (data) => {\r\n    return function (dispatch) {\r\n        return simpleDataTableApi.getTableData()\r\n            .then(res => {\r\n                dispatch({ type: \"REGISTER\", res });\r\n            })\r\n            .catch(error => {\r\n                throw error;\r\n            });\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\nconst Pagination = ({ perPage, tableDatas, paginate }) => {\r\n    const pageNumbers = []\r\n\r\n    for (let i = 1; i <= Math.ceil(tableDatas / perPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <ul class=\"pagination\">\r\n                    {\r\n                        pageNumbers.map(number => {\r\n                            return (\r\n                                <li key={number} class=\"page-item\">\r\n                                    <a onClick={() => paginate(number)} href=\"#\" class=\"page-link\">\r\n                                        {number}\r\n                                    </a>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from '../action/Action';\r\nimport Pagination from '../components/Pagination';\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport '../App.css';\r\n\r\nconst columnHeader = [\"id\", \"name\", \"email\", \"body\"];\r\n\r\nclass SimpleDataTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: [],\r\n            switchSort: false,\r\n            currentRowData: [],\r\n            itemLength: 50,\r\n            perPage: 50,\r\n            input: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getData()\r\n        let totalItemsCount = this.state.tableData.length;\r\n        let currentRowData = this.state.tableData.slice(0, 50);\r\n        this.setState({\r\n            currentRowData,\r\n            itemLength: totalItemsCount\r\n        })\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps.tableDatas) {\r\n            this.setState({\r\n                tableData: nextProps.tableDatas,\r\n            },\r\n                () => {\r\n                    let totalItemsCount = this.state.tableData.length;\r\n                    let currentRowData = this.state.tableData.slice(0, 50);\r\n                    this.setState({\r\n                        currentRowData,\r\n                        itemLength: totalItemsCount\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    handleSort = (key) => {\r\n        this.setState({\r\n            switchSort: !this.state.switchSort\r\n        })\r\n        let copyTableData = [...this.state.tableData];\r\n        copyTableData.sort(this.compareByDesc(key));\r\n        this.setState({\r\n            currentRowData: copyTableData.slice(0, 50)\r\n        })\r\n    }\r\n    compareByDesc = (key) => {\r\n        if (this.state.switchSort) {\r\n            return function (a, b) {\r\n                if (a[key] < b[key]) return -1;\r\n                if (a[key] > b[key]) return 1;\r\n                return 0;\r\n            };\r\n        } else {\r\n            return function (a, b) {\r\n                if (a[key] > b[key]) return -1;\r\n                if (a[key] < b[key]) return 1;\r\n                return 0;\r\n            };\r\n        }\r\n    }\r\n    generateHeader = () => {\r\n        let res = [];\r\n        for (var i = 0; i < columnHeader.length; i++) {\r\n            res.push(<th key={columnHeader[i]}>\r\n                <a href=\"#\" id={columnHeader[i]} key={columnHeader[i]}\r\n                    onClick={(e) => this.handleSort(e.target.id)}>{columnHeader[i]}</a>\r\n            </th>)\r\n        }\r\n        return res;\r\n    }\r\n    generateTableData() {\r\n        let res = [];\r\n        let tableData = this.state.currentRowData;\r\n        for (var i = 0; i < tableData.length; i++) {\r\n            res.push(\r\n                <tr key={i}>\r\n                    <td key={tableData[i].id}>{tableData[i].id}</td>\r\n                    <td key={tableData[i].name}>{tableData[i].name}</td>\r\n                    <td key={tableData[i].email}>{tableData[i].email}</td>\r\n                    <td key={tableData[i].body}>{tableData[i].body}</td>\r\n                </tr>\r\n            )\r\n        }\r\n        return res;\r\n    }\r\n    handlePageChange = (pageNumber) => {\r\n        let upperLimit = parseInt(pageNumber) * 50;\r\n        let lowerLimit = upperLimit - 50;\r\n        let data = [];\r\n        if (upperLimit <= this.state.itemLength) {\r\n            data = this.state.tableData.slice(lowerLimit, upperLimit);\r\n        } else {\r\n            data = this.state.tableData.slice(lowerLimit);\r\n        }\r\n        this.setState({\r\n            currentRowData: data\r\n        })\r\n    }\r\n\r\n    keyWordChange = (e) => {\r\n        this.setState({\r\n            input: e.target.value\r\n        },\r\n            () => {\r\n                let result = this.props.tableDatas.filter(data => (data.name.toLowerCase().includes(this.state.input.toLowerCase()) || data.email.toLowerCase().includes(this.state.input.toLowerCase()) || data.body.toLowerCase().includes(this.state.input.toLowerCase())));\r\n                this.setState({\r\n                    currentRowData: result.splice(0, 50)\r\n                })\r\n            }\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"textAlnCr\">Simple data table</h1><br />\r\n                <Row>\r\n                    <Col>\r\n                        <Pagination\r\n                            perPage={this.state.perPage}\r\n                            tableDatas={this.state.itemLength}\r\n                            paginate={this.handlePageChange}\r\n                        />\r\n                    </Col>\r\n                    <Col></Col>\r\n                    <Col>\r\n                        <input\r\n                            id=\"inputValue\"\r\n                            value={this.state.input}\r\n                            onChange={(e) => this.keyWordChange(e)}\r\n                            class=\"form-control form-control-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search by name or email or body\"\r\n                            aria-label=\".form-control-sm example\">\r\n                        </input>\r\n                    </Col>\r\n                </Row><br />\r\n                <table className=\"table table-hover textAlnCr\">\r\n                    <thead>\r\n                        <tr>\r\n                            {this.generateHeader()}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.generateTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tableDatas: state && state.datas ? state.datas : \"\"\r\n\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        Object.assign({}, Action), dispatch);\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SimpleDataTable);","import React from 'react';\nimport './App.css';\nimport SimpleDataTable from './pages/SimpleDataTable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleDataTable />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const REGISTER = 'REGISTER';\r\n","import * as types from \"../action/ActionTypes\";\r\n\r\nconst Reducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case types.REGISTER:\r\n            return {\r\n                ...state,\r\n                datas: action.res ? action.res.data : []\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default Reducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport Reducer from './reducer/Reducer';\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst { logger } = require(`redux-logger`);\r\nmiddlewares.push(logger);\r\n\r\nconst composeEnhancers = composeWithDevTools({});\r\n\r\nexport const store = createStore(Reducer, composeEnhancers(applyMiddleware(...middlewares)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './configureStore'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}